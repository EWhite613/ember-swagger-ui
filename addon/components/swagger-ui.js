import Ember from 'ember';
import layout from '../templates/components/swagger-ui';

export default Ember.Component.extend({
  layout: layout,

  classNames: ['swagger-section'],

  /**
   * Store the original pushState function in order to restore it on willDestroyElement.
   */
  // bbqPushState: Ember.$.bbq.pushState,

  handleLoginGlobal: window.handleLogin,

  /* Supported Component properties */
  title: null,
  url: null,
  spec: undefined,
  docExpansion: 'none',
  showRequestHeaders: false,
  supportedSubmitMethods: ['get', 'post', 'put', 'delete', 'patch'],
  authorizations: null,
  onComplete: null,
  onFailure: null,

  didInsertElement() {
    this._initSwaggerUi();
  },

  willDestroyElement() {
    // restore the original pushState function
    // Ember.$.bbq.pushState = this.get('bbqPushState');
  },


  _initSwaggerUi() {
    let that = this;
    let url = this.get('url') || 'http://petstore.swagger.io/v2/swagger.json';

    that._translate();
    const swaggerUi = SwaggerUIBundle({
      url: url,
      dom_id: '#swagger-ui-container',
      spec: this.get('spec'),
      validatorUrl: null,
      deepLinking: false,
      docExpansion: that.get('docExpansion'),
      apisSorter: 'alpha',
      showRequestHeaders: that.get('showRequestHeaders'),
      supportedSubmitMethods: that.get('supportedSubmitMethods'),
      presets: [
        SwaggerUIBundle.presets.apis,
        SwaggerUIStandalonePreset
      ],
      plugins: [
          SwaggerUIBundle.plugins.DownloadUrl
      ],
    })
    swaggerUi.authActions.authorize({Authorization: {name: "Authorization", schema: {type: "apiKey", in: "header", name: "Authorization"}, value: "Bearer 333"}})

    window.swaggerUi = swaggerUi
    // window.swaggerUi = SwaggerUIBundle({
    //   url: url,
    //   spec: that.get('spec'),
    //   validatorUrl: null,
    //   dom_id: '#swagger-ui-container',
    //   docExpansion: that.get('docExpansion'),
    //   apisSorter: 'alpha',
    //   deepLinking: false,
    //   showRequestHeaders: that.get('showRequestHeaders'),
    //   supportedSubmitMethods: that.get('supportedSubmitMethods'),
    //   onFailure: this.get("onFailure") || function() {
    //     console.log('Failed to load SwaggerUi');
    //   }
    // });

    if (!this.get('onComplete')){
      console.log('no complete')
      if(typeof window.swaggerUi.initOAuth === "function") {
        window.swaggerUi.initOAuth({
          clientId: "your-client-id",
          clientSecret: "your-client-secret",
          realm: "your-realms",
          appName: "your-app-name",
          scopeSeparator: ","
        });
      }
  
      // that._translate();
      this._addApiKeyAuthorization(this);
      // that._highlight();
      that._relativeUrls();
  
      // // we need to no-op a jquery plugin function that routes us to index if not overridden.
      // Ember.$.bbq.pushState = function() { };
  
      // move the generated dialog element to the component's element
      window.handleLogin = function() {
        that.$('.api-popup-dialog').remove();
        that.handleLoginGlobal();
        Ember.run.later(function() {
          let dialog = Ember.$('.api-popup-dialog');
          that.$().append(dialog);
          dialog.css('display', 'block');
        }, 500);
      };
  
      // add change listener to apiKey input.
      let input = that.$('#input_apiKey');
      if (input) {
        input.change(that._addApiKeyAuthorization(that));
      }
    } else {
      this.get('onComplete')(window.swaggerUi.specSelectors)
    }
  },


  _translate() {
    if(window.SwaggerTranslator) {
      window.SwaggerTranslator.translate();
    }
  },


  _addApiKeyAuthorization(ctx) {
    let authz = ctx.get('authorizations');
    if (authz) {
      if (authz.type === 'query') {
        Ember.$('#input_apiKey').val(authz.value);
      }

      // var apiKeyAuth = new SwaggerClient.ApiKeyAuthorization(authz.name, authz.value, authz.type);
      // window.swaggerUi.api.clientAuthorizations.add(authz.name, apiKeyAuth);
      window.swaggerUi.authActions.authorize({JWT: {name: 'JWT', schema: {type: authz.type, in: 'header', name: authz.name, description: ''}, value: authz.value}})
    }
  },



  /**
   * Highlights code blocks.
   */
  _highlight() {
    let codes = this.$('pre code');
    if (codes) {
      codes.each(function(i, e) {
         hljs.highlightBlock(e);
      });
    }
  },

  /**
  * Format absolute Urls generated by swagger-ui into relative Urls
  */
  _relativeUrls() {
    Ember.$('#swagger-ui-container a.toggleOperation').each(function() {
      Ember.$( this ).attr('href', window.location.href + Ember.$( this ).attr('href'));
    });
  }

});
